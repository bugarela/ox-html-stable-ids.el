#+title: ox-html-stable-ids

#+headers: :exports none
#+begin_src org :tangle example.org
  ,* Hello, world!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-publish-file "example.org"
		    '("ox-html-stable-ids"
	              :publishing-function org-html-publish-to-html
		      :base-directory "."
		      :publishing-directory "."
		      :section-numbers nil
		      :with-toc nil))
#+end_src

#+RESULTS:

When publishing HTML with Org mode's exporters, the headlines in the resulting documents get assigned ID attributes.
These are used as anchors, amongst other things.
By default, these are random, so a headline might get assigned ~org81963c6~ as its ID:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat example.html | grep "<h2 id="
#+end_src

#+RESULTS[bceb2028e92191632ebd6a8816fa0dfa61629e2e]:
: <h2 id="org81963c6">Hello, world!</h2>

Because subsequent exports of the same Org file produce different IDs, there's no way to bookmark a headline.
Instead, it'd be useful to have stable IDs, based on the titles they're attached to.
In the example above, that ID would be "hello-world".

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (require 'ert)
  (load-file "ox-html-stable-ids.el")

  (ert-deftest hello-world-test ()
    (org-html-stable-ids-add)
    (find-file "example.org")
    (org-html-export-as-html)
    (should (string-match-p
	     "<h2 id=\"hello-world"
	     (with-current-buffer "*Org HTML Export*" (buffer-string))))
    (org-html-stable-ids-remove))
#+end_src

The function responsible for exporting headlines to HTML---named =org-html-headline=---calls =org-export-get-reference= to get a unique reference to the headline.
By overriding the latter, we can get the exporter to assign custom IDs to the document's headlines.

We'll write an advise to override the implementation of the =org-export-get-reference= function.
To make the custom function easy to switch on and off, we'll write two helper functions:

#+headers: :tangle ox-html-stable-ids.el
#+begin_src emacs-lisp
  (defun org-html-stable-ids-add ()
    (interactive)
    (advice-add #'org-export-get-reference :override #'org-html-stable-ids--get-reference))

  (defun org-html-stable-ids-remove ()
    (interactive)
    (advice-remove #'org-export-get-reference #'org-html-stable-ids--get-reference))
#+end_src

#+RESULTS:
: org-html-stable-ids-remove

To check if everything is hooked up correctly, we'll define =org-html-stable-ids--get-reference= that ignores the inputs and returns a static result:

#+begin_src emacs-lisp
  (defun org-html-stable-ids--get-reference (datum info)
    "hello-world")
#+end_src

As expected, the result used "hello-world" as the ID for all headlines:

#+headers: :exports none
#+begin_src org :tangle example-2.org
  ,* Hello, world!
  ,* Another headline!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "example-2.org"
		    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
		      :base-directory "."
		      :publishing-directory "."
		      :section-numbers nil
		      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat example-2.html | grep "<h2 id="
#+end_src

#+RESULTS[564a1f36688d42106a6f84efdae6067cf4bcbfd3]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="hello-world">Another headline!</h2>

To have the IDs match each separate headline's contents, take the headline from the =datum= parmeter with =org-element-property=:

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (ert-deftest multiple-headlines-test ()
    (org-html-stable-ids-add)
    (find-file "example-3.org")
    (org-html-export-as-html)
    (let ((buffer (with-current-buffer "*Org HTML Export*" (buffer-string))))
      (should (string-match-p "<h2 id=\"hello-world" buffer))
      (should (string-match-p "<h2 id=\"another-headline" buffer)))
    (org-html-stable-ids-remove))
#+end_src

#+RESULTS:
: multiple-headlines-test

#+headers: :tangle oxhtml-stable-ids.el
#+begin_src emacs-lisp
  (defun org-html-stable-ids--get-reference (datum info)
    (org-html-stable-ids--to-kebab-case
     (org-element-property :raw-value datum)))

  (defun org-html-stable-ids--to-kebab-case (string)
    (string-trim
     (replace-regexp-in-string "[^a-z0-9]+" "-"
                               (downcase string))
     "-" "-"))
#+end_src

#+RESULTS:
: org-html-stable-ids--to-kebab-case

Now, all headlines in the file get assigned IDs that match their contents:

#+headers: :exports none
#+begin_src org :tangle example-3.org
  ,* Hello, world!
  ,* Another headline!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "example-3.org"
		    '("ox-html-stable-ids"
	              :publishing-function org-html-publish-to-html
		      :base-directory "."
		      :publishing-directory "."
		      :section-numbers nil
		      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat example-3.html | grep "<h2 id="
#+end_src

#+RESULTS[7ca8f72e3c8cf16f3aeb35f5f6e42e8d2c705f5f]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="another-headline">Another headline!</h2>
